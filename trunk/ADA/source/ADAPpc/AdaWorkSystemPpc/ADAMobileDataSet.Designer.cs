//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.1433.
// 
namespace AdaWorkSystemPpc {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ADAMobileDataSet")]
    public partial class ADAMobileDataSet : global::System.Data.DataSet {
        
        private ActivityDataTable tableActivity;
        
        private ScheduleDataTable tableSchedule;
        
        private SymbolDataTable tableSymbol;
        
        private UserDataTable tableUser;
        
        private global::System.Data.DataRelation relationFK_Activity_Schedule;
        
        private global::System.Data.DataRelation relationSymbol_Activity;
        
        private global::System.Data.DataRelation relationSymbol_Schedule;
        
        private global::System.Data.DataRelation relationFK_Activity_Schedule1;
        
        private global::System.Data.DataRelation relationUser_Schedule;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ADAMobileDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityDataTable Activity {
            get {
                return this.tableActivity;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScheduleDataTable Schedule {
            get {
                return this.tableSchedule;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SymbolDataTable Symbol {
            get {
                return this.tableSymbol;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ADAMobileDataSet cln = ((ADAMobileDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Activity"] != null)) {
                    base.Tables.Add(new ActivityDataTable(ds.Tables["Activity"]));
                }
                if ((ds.Tables["Schedule"] != null)) {
                    base.Tables.Add(new ScheduleDataTable(ds.Tables["Schedule"]));
                }
                if ((ds.Tables["Symbol"] != null)) {
                    base.Tables.Add(new SymbolDataTable(ds.Tables["Symbol"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableActivity = ((ActivityDataTable)(base.Tables["Activity"]));
            if ((initTable == true)) {
                if ((this.tableActivity != null)) {
                    this.tableActivity.InitVars();
                }
            }
            this.tableSchedule = ((ScheduleDataTable)(base.Tables["Schedule"]));
            if ((initTable == true)) {
                if ((this.tableSchedule != null)) {
                    this.tableSchedule.InitVars();
                }
            }
            this.tableSymbol = ((SymbolDataTable)(base.Tables["Symbol"]));
            if ((initTable == true)) {
                if ((this.tableSymbol != null)) {
                    this.tableSymbol.InitVars();
                }
            }
            this.tableUser = ((UserDataTable)(base.Tables["User"]));
            if ((initTable == true)) {
                if ((this.tableUser != null)) {
                    this.tableUser.InitVars();
                }
            }
            this.relationFK_Activity_Schedule = this.Relations["FK_Activity_Schedule"];
            this.relationSymbol_Activity = this.Relations["Symbol_Activity"];
            this.relationSymbol_Schedule = this.Relations["Symbol_Schedule"];
            this.relationFK_Activity_Schedule1 = this.Relations["FK_Activity_Schedule1"];
            this.relationUser_Schedule = this.Relations["User_Schedule"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ADAMobileDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ADAMobileDataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableActivity = new ActivityDataTable();
            base.Tables.Add(this.tableActivity);
            this.tableSchedule = new ScheduleDataTable();
            base.Tables.Add(this.tableSchedule);
            this.tableSymbol = new SymbolDataTable();
            base.Tables.Add(this.tableSymbol);
            this.tableUser = new UserDataTable();
            base.Tables.Add(this.tableUser);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Activity_Schedule1", new global::System.Data.DataColumn[] {
                        this.tableSchedule.ScheduleIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableActivity.ScheduleIdColumn});
            this.tableActivity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_Activity_Schedule = new global::System.Data.DataRelation("FK_Activity_Schedule", new global::System.Data.DataColumn[] {
                        this.tableSchedule.ScheduleIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableActivity.ScheduleIdColumn}, false);
            this.Relations.Add(this.relationFK_Activity_Schedule);
            this.relationSymbol_Activity = new global::System.Data.DataRelation("Symbol_Activity", new global::System.Data.DataColumn[] {
                        this.tableSymbol.SymbolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableActivity.SymbolIdColumn}, false);
            this.Relations.Add(this.relationSymbol_Activity);
            this.relationSymbol_Schedule = new global::System.Data.DataRelation("Symbol_Schedule", new global::System.Data.DataColumn[] {
                        this.tableSymbol.SymbolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSchedule.SymbolIdColumn}, false);
            this.Relations.Add(this.relationSymbol_Schedule);
            this.relationFK_Activity_Schedule1 = new global::System.Data.DataRelation("FK_Activity_Schedule1", new global::System.Data.DataColumn[] {
                        this.tableSchedule.ScheduleIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableActivity.MiniScheduleIdColumn}, false);
            this.Relations.Add(this.relationFK_Activity_Schedule1);
            this.relationUser_Schedule = new global::System.Data.DataRelation("User_Schedule", new global::System.Data.DataColumn[] {
                        this.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSchedule.UserIdColumn}, false);
            this.Relations.Add(this.relationUser_Schedule);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActivity() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSchedule() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSymbol() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ADAMobileDataSet ds = new ADAMobileDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ActivityRowChangeEventHandler(object sender, ActivityRowChangeEvent e);
        
        public delegate void ScheduleRowChangeEventHandler(object sender, ScheduleRowChangeEvent e);
        
        public delegate void SymbolRowChangeEventHandler(object sender, SymbolRowChangeEvent e);
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActivityDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnActivityId;
            
            private global::System.Data.DataColumn columnScheduleId;
            
            private global::System.Data.DataColumn columnSequence;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescripton;
            
            private global::System.Data.DataColumn columnSymbolId;
            
            private global::System.Data.DataColumn columnStartTime;
            
            private global::System.Data.DataColumn columnEndTime;
            
            private global::System.Data.DataColumn columnMiniScheduleId;
            
            private global::System.Data.DataColumn columnScore;
            
            private global::System.Data.DataColumn columnExecutionStart;
            
            private global::System.Data.DataColumn columnExecutionEnd;
            
            private global::System.Data.DataColumn columnrowguid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityDataTable() {
                this.TableName = "Activity";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActivityDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActivityIdColumn {
                get {
                    return this.columnActivityId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleIdColumn {
                get {
                    return this.columnScheduleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptonColumn {
                get {
                    return this.columnDescripton;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SymbolIdColumn {
                get {
                    return this.columnSymbolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiniScheduleIdColumn {
                get {
                    return this.columnMiniScheduleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScoreColumn {
                get {
                    return this.columnScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStartColumn {
                get {
                    return this.columnExecutionStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionEndColumn {
                get {
                    return this.columnExecutionEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rowguidColumn {
                get {
                    return this.columnrowguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityRow this[int index] {
                get {
                    return ((ActivityRow)(this.Rows[index]));
                }
            }
            
            public event ActivityRowChangeEventHandler ActivityRowChanging;
            
            public event ActivityRowChangeEventHandler ActivityRowChanged;
            
            public event ActivityRowChangeEventHandler ActivityRowDeleting;
            
            public event ActivityRowChangeEventHandler ActivityRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActivityRow(ActivityRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityRow AddActivityRow(ScheduleRow parentScheduleRowByFK_Activity_Schedule, int Sequence, string Name, string Descripton, SymbolRow parentSymbolRowBySymbol_Activity, System.DateTime StartTime, System.DateTime EndTime, ScheduleRow parentScheduleRowByFK_Activity_Schedule1, int Score, System.DateTime ExecutionStart, System.DateTime ExecutionEnd, System.Guid rowguid) {
                ActivityRow rowActivityRow = ((ActivityRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Sequence,
                        Name,
                        Descripton,
                        null,
                        StartTime,
                        EndTime,
                        null,
                        Score,
                        ExecutionStart,
                        ExecutionEnd,
                        rowguid};
                if ((parentScheduleRowByFK_Activity_Schedule != null)) {
                    columnValuesArray[1] = parentScheduleRowByFK_Activity_Schedule[0];
                }
                if ((parentSymbolRowBySymbol_Activity != null)) {
                    columnValuesArray[5] = parentSymbolRowBySymbol_Activity[0];
                }
                if ((parentScheduleRowByFK_Activity_Schedule1 != null)) {
                    columnValuesArray[8] = parentScheduleRowByFK_Activity_Schedule1[0];
                }
                rowActivityRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActivityRow);
                return rowActivityRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityRow FindByActivityIdrowguid(int ActivityId, System.Guid rowguid) {
                return ((ActivityRow)(this.Rows.Find(new object[] {
                            ActivityId,
                            rowguid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ActivityDataTable cln = ((ActivityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ActivityDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnActivityId = base.Columns["ActivityId"];
                this.columnScheduleId = base.Columns["ScheduleId"];
                this.columnSequence = base.Columns["Sequence"];
                this.columnName = base.Columns["Name"];
                this.columnDescripton = base.Columns["Descripton"];
                this.columnSymbolId = base.Columns["SymbolId"];
                this.columnStartTime = base.Columns["StartTime"];
                this.columnEndTime = base.Columns["EndTime"];
                this.columnMiniScheduleId = base.Columns["MiniScheduleId"];
                this.columnScore = base.Columns["Score"];
                this.columnExecutionStart = base.Columns["ExecutionStart"];
                this.columnExecutionEnd = base.Columns["ExecutionEnd"];
                this.columnrowguid = base.Columns["rowguid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnActivityId = new global::System.Data.DataColumn("ActivityId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivityId);
                this.columnScheduleId = new global::System.Data.DataColumn("ScheduleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleId);
                this.columnSequence = new global::System.Data.DataColumn("Sequence", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequence);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescripton = new global::System.Data.DataColumn("Descripton", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescripton);
                this.columnSymbolId = new global::System.Data.DataColumn("SymbolId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSymbolId);
                this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTime);
                this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndTime);
                this.columnMiniScheduleId = new global::System.Data.DataColumn("MiniScheduleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiniScheduleId);
                this.columnScore = new global::System.Data.DataColumn("Score", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScore);
                this.columnExecutionStart = new global::System.Data.DataColumn("ExecutionStart", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStart);
                this.columnExecutionEnd = new global::System.Data.DataColumn("ExecutionEnd", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionEnd);
                this.columnrowguid = new global::System.Data.DataColumn("rowguid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowguid);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnActivityId,
                                this.columnrowguid}, true));
                this.columnActivityId.AutoIncrement = true;
                this.columnActivityId.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnDescripton.MaxLength = 500;
                this.columnrowguid.AllowDBNull = false;
                this.columnrowguid.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityRow NewActivityRow() {
                return ((ActivityRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ActivityRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ActivityRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActivityRowChanged != null)) {
                    this.ActivityRowChanged(this, new ActivityRowChangeEvent(((ActivityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActivityRowChanging != null)) {
                    this.ActivityRowChanging(this, new ActivityRowChangeEvent(((ActivityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActivityRowDeleted != null)) {
                    this.ActivityRowDeleted(this, new ActivityRowChangeEvent(((ActivityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActivityRowDeleting != null)) {
                    this.ActivityRowDeleting(this, new ActivityRowChangeEvent(((ActivityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActivityRow(ActivityRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ADAMobileDataSet ds = new ADAMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActivityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScheduleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnScheduleId;
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnSymbolId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnrowguid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleDataTable() {
                this.TableName = "Schedule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleIdColumn {
                get {
                    return this.columnScheduleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SymbolIdColumn {
                get {
                    return this.columnSymbolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rowguidColumn {
                get {
                    return this.columnrowguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow this[int index] {
                get {
                    return ((ScheduleRow)(this.Rows[index]));
                }
            }
            
            public event ScheduleRowChangeEventHandler ScheduleRowChanging;
            
            public event ScheduleRowChangeEventHandler ScheduleRowChanged;
            
            public event ScheduleRowChangeEventHandler ScheduleRowDeleting;
            
            public event ScheduleRowChangeEventHandler ScheduleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScheduleRow(ScheduleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow AddScheduleRow(UserRow parentUserRowByUser_Schedule, System.DateTime Date, int Type, bool IsActive, SymbolRow parentSymbolRowBySymbol_Schedule, string Name, System.Guid rowguid) {
                ScheduleRow rowScheduleRow = ((ScheduleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Date,
                        Type,
                        IsActive,
                        null,
                        Name,
                        rowguid};
                if ((parentUserRowByUser_Schedule != null)) {
                    columnValuesArray[1] = parentUserRowByUser_Schedule[0];
                }
                if ((parentSymbolRowBySymbol_Schedule != null)) {
                    columnValuesArray[5] = parentSymbolRowBySymbol_Schedule[0];
                }
                rowScheduleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScheduleRow);
                return rowScheduleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow FindByScheduleIdrowguid(int ScheduleId, System.Guid rowguid) {
                return ((ScheduleRow)(this.Rows.Find(new object[] {
                            ScheduleId,
                            rowguid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScheduleDataTable cln = ((ScheduleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScheduleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScheduleId = base.Columns["ScheduleId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnDate = base.Columns["Date"];
                this.columnType = base.Columns["Type"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnSymbolId = base.Columns["SymbolId"];
                this.columnName = base.Columns["Name"];
                this.columnrowguid = base.Columns["rowguid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScheduleId = new global::System.Data.DataColumn("ScheduleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleId);
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnSymbolId = new global::System.Data.DataColumn("SymbolId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSymbolId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnrowguid = new global::System.Data.DataColumn("rowguid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowguid);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnScheduleId,
                                this.columnrowguid}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnScheduleId}, false));
                this.columnScheduleId.AutoIncrement = true;
                this.columnScheduleId.AllowDBNull = false;
                this.columnScheduleId.Unique = true;
                this.columnName.MaxLength = 100;
                this.columnrowguid.AllowDBNull = false;
                this.columnrowguid.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow NewScheduleRow() {
                return ((ScheduleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScheduleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScheduleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScheduleRowChanged != null)) {
                    this.ScheduleRowChanged(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScheduleRowChanging != null)) {
                    this.ScheduleRowChanging(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScheduleRowDeleted != null)) {
                    this.ScheduleRowDeleted(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScheduleRowDeleting != null)) {
                    this.ScheduleRowDeleting(this, new ScheduleRowChangeEvent(((ScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScheduleRow(ScheduleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ADAMobileDataSet ds = new ADAMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScheduleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SymbolDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSymbolId;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnImage;
            
            private global::System.Data.DataColumn columnSound;
            
            private global::System.Data.DataColumn columnCategoryId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnrowguid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SymbolDataTable() {
                this.TableName = "Symbol";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SymbolDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SymbolIdColumn {
                get {
                    return this.columnSymbolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageColumn {
                get {
                    return this.columnImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoundColumn {
                get {
                    return this.columnSound;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIdColumn {
                get {
                    return this.columnCategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rowguidColumn {
                get {
                    return this.columnrowguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SymbolRow this[int index] {
                get {
                    return ((SymbolRow)(this.Rows[index]));
                }
            }
            
            public event SymbolRowChangeEventHandler SymbolRowChanging;
            
            public event SymbolRowChangeEventHandler SymbolRowChanged;
            
            public event SymbolRowChangeEventHandler SymbolRowDeleting;
            
            public event SymbolRowChangeEventHandler SymbolRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSymbolRow(SymbolRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SymbolRow AddSymbolRow(bool IsActive, byte[] Image, byte[] Sound, int CategoryId, System.Guid Name, System.Guid rowguid) {
                SymbolRow rowSymbolRow = ((SymbolRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        IsActive,
                        Image,
                        Sound,
                        CategoryId,
                        Name,
                        rowguid};
                rowSymbolRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSymbolRow);
                return rowSymbolRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SymbolRow FindBySymbolIdrowguid(int SymbolId, System.Guid rowguid) {
                return ((SymbolRow)(this.Rows.Find(new object[] {
                            SymbolId,
                            rowguid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SymbolDataTable cln = ((SymbolDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SymbolDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSymbolId = base.Columns["SymbolId"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnImage = base.Columns["Image"];
                this.columnSound = base.Columns["Sound"];
                this.columnCategoryId = base.Columns["CategoryId"];
                this.columnName = base.Columns["Name"];
                this.columnrowguid = base.Columns["rowguid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSymbolId = new global::System.Data.DataColumn("SymbolId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSymbolId);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnImage = new global::System.Data.DataColumn("Image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImage);
                this.columnSound = new global::System.Data.DataColumn("Sound", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSound);
                this.columnCategoryId = new global::System.Data.DataColumn("CategoryId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnrowguid = new global::System.Data.DataColumn("rowguid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowguid);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSymbolId,
                                this.columnrowguid}, true));
                this.columnSymbolId.AutoIncrement = true;
                this.columnSymbolId.AllowDBNull = false;
                this.columnSymbolId.ReadOnly = true;
                this.columnIsActive.AllowDBNull = false;
                this.columnCategoryId.AllowDBNull = false;
                this.columnrowguid.AllowDBNull = false;
                this.columnrowguid.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SymbolRow NewSymbolRow() {
                return ((SymbolRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SymbolRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SymbolRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SymbolRowChanged != null)) {
                    this.SymbolRowChanged(this, new SymbolRowChangeEvent(((SymbolRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SymbolRowChanging != null)) {
                    this.SymbolRowChanging(this, new SymbolRowChangeEvent(((SymbolRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SymbolRowDeleted != null)) {
                    this.SymbolRowDeleted(this, new SymbolRowChangeEvent(((SymbolRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SymbolRowDeleting != null)) {
                    this.SymbolRowDeleting(this, new SymbolRowChangeEvent(((SymbolRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSymbolRow(SymbolRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ADAMobileDataSet ds = new ADAMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SymbolDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnCompany;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnTelephone;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnScore;
            
            private global::System.Data.DataColumn columnUserLevelId;
            
            private global::System.Data.DataColumn columnrowguid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserDataTable() {
                this.TableName = "User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelephoneColumn {
                get {
                    return this.columnTelephone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScoreColumn {
                get {
                    return this.columnScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLevelIdColumn {
                get {
                    return this.columnUserLevelId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rowguidColumn {
                get {
                    return this.columnrowguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow AddUserRow(bool IsActive, string Name, string Company, string Address, string Telephone, string Email, string Notes, int Score, int UserLevelId, System.Guid rowguid) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        IsActive,
                        Name,
                        Company,
                        Address,
                        Telephone,
                        Email,
                        Notes,
                        Score,
                        UserLevelId,
                        rowguid};
                rowUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow FindByUserIdrowguid(int UserId, System.Guid rowguid) {
                return ((UserRow)(this.Rows.Find(new object[] {
                            UserId,
                            rowguid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnName = base.Columns["Name"];
                this.columnCompany = base.Columns["Company"];
                this.columnAddress = base.Columns["Address"];
                this.columnTelephone = base.Columns["Telephone"];
                this.columnEmail = base.Columns["Email"];
                this.columnNotes = base.Columns["Notes"];
                this.columnScore = base.Columns["Score"];
                this.columnUserLevelId = base.Columns["UserLevelId"];
                this.columnrowguid = base.Columns["rowguid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnCompany = new global::System.Data.DataColumn("Company", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnTelephone = new global::System.Data.DataColumn("Telephone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephone);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnScore = new global::System.Data.DataColumn("Score", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScore);
                this.columnUserLevelId = new global::System.Data.DataColumn("UserLevelId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserLevelId);
                this.columnrowguid = new global::System.Data.DataColumn("rowguid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowguid);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserId,
                                this.columnrowguid}, true));
                this.columnUserId.AutoIncrement = true;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.ReadOnly = true;
                this.columnName.MaxLength = 72;
                this.columnCompany.MaxLength = 72;
                this.columnAddress.MaxLength = 372;
                this.columnTelephone.MaxLength = 50;
                this.columnEmail.MaxLength = 74;
                this.columnNotes.MaxLength = 120;
                this.columnrowguid.AllowDBNull = false;
                this.columnrowguid.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ADAMobileDataSet ds = new ADAMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ActivityRow : global::System.Data.DataRow {
            
            private ActivityDataTable tableActivity;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActivityRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActivity = ((ActivityDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActivityId {
                get {
                    return ((int)(this[this.tableActivity.ActivityIdColumn]));
                }
                set {
                    this[this.tableActivity.ActivityIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScheduleId {
                get {
                    try {
                        return ((int)(this[this.tableActivity.ScheduleIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduleId\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.ScheduleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sequence {
                get {
                    try {
                        return ((int)(this[this.tableActivity.SequenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sequence\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.SequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableActivity.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descripton {
                get {
                    try {
                        return ((string)(this[this.tableActivity.DescriptonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Descripton\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.DescriptonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SymbolId {
                get {
                    try {
                        return ((int)(this[this.tableActivity.SymbolIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SymbolId\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.SymbolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableActivity.StartTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartTime\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.StartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableActivity.EndTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndTime\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.EndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MiniScheduleId {
                get {
                    try {
                        return ((int)(this[this.tableActivity.MiniScheduleIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MiniScheduleId\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.MiniScheduleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Score {
                get {
                    try {
                        return ((int)(this[this.tableActivity.ScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Score\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.ScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ExecutionStart {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableActivity.ExecutionStartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutionStart\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.ExecutionStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ExecutionEnd {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableActivity.ExecutionEndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutionEnd\' in table \'Activity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity.ExecutionEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid rowguid {
                get {
                    return ((global::System.Guid)(this[this.tableActivity.rowguidColumn]));
                }
                set {
                    this[this.tableActivity.rowguidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow ScheduleRowByFK_Activity_Schedule {
                get {
                    return ((ScheduleRow)(this.GetParentRow(this.Table.ParentRelations["FK_Activity_Schedule"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Activity_Schedule"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SymbolRow SymbolRow {
                get {
                    return ((SymbolRow)(this.GetParentRow(this.Table.ParentRelations["Symbol_Activity"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Symbol_Activity"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow ScheduleRowByFK_Activity_Schedule1 {
                get {
                    return ((ScheduleRow)(this.GetParentRow(this.Table.ParentRelations["FK_Activity_Schedule1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Activity_Schedule1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduleIdNull() {
                return this.IsNull(this.tableActivity.ScheduleIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduleIdNull() {
                this[this.tableActivity.ScheduleIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSequenceNull() {
                return this.IsNull(this.tableActivity.SequenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSequenceNull() {
                this[this.tableActivity.SequenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableActivity.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableActivity.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptonNull() {
                return this.IsNull(this.tableActivity.DescriptonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptonNull() {
                this[this.tableActivity.DescriptonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSymbolIdNull() {
                return this.IsNull(this.tableActivity.SymbolIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSymbolIdNull() {
                this[this.tableActivity.SymbolIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartTimeNull() {
                return this.IsNull(this.tableActivity.StartTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartTimeNull() {
                this[this.tableActivity.StartTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndTimeNull() {
                return this.IsNull(this.tableActivity.EndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndTimeNull() {
                this[this.tableActivity.EndTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiniScheduleIdNull() {
                return this.IsNull(this.tableActivity.MiniScheduleIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiniScheduleIdNull() {
                this[this.tableActivity.MiniScheduleIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScoreNull() {
                return this.IsNull(this.tableActivity.ScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScoreNull() {
                this[this.tableActivity.ScoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutionStartNull() {
                return this.IsNull(this.tableActivity.ExecutionStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutionStartNull() {
                this[this.tableActivity.ExecutionStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutionEndNull() {
                return this.IsNull(this.tableActivity.ExecutionEndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutionEndNull() {
                this[this.tableActivity.ExecutionEndColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ScheduleRow : global::System.Data.DataRow {
            
            private ScheduleDataTable tableSchedule;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchedule = ((ScheduleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScheduleId {
                get {
                    return ((int)(this[this.tableSchedule.ScheduleIdColumn]));
                }
                set {
                    this[this.tableSchedule.ScheduleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    try {
                        return ((int)(this[this.tableSchedule.UserIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserId\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSchedule.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Type {
                get {
                    try {
                        return ((int)(this[this.tableSchedule.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableSchedule.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SymbolId {
                get {
                    try {
                        return ((int)(this[this.tableSchedule.SymbolIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SymbolId\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.SymbolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableSchedule.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Schedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchedule.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid rowguid {
                get {
                    return ((global::System.Guid)(this[this.tableSchedule.rowguidColumn]));
                }
                set {
                    this[this.tableSchedule.rowguidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SymbolRow SymbolRow {
                get {
                    return ((SymbolRow)(this.GetParentRow(this.Table.ParentRelations["Symbol_Schedule"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Symbol_Schedule"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRow {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["User_Schedule"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["User_Schedule"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIdNull() {
                return this.IsNull(this.tableSchedule.UserIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIdNull() {
                this[this.tableSchedule.UserIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableSchedule.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableSchedule.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableSchedule.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableSchedule.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableSchedule.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableSchedule.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSymbolIdNull() {
                return this.IsNull(this.tableSchedule.SymbolIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSymbolIdNull() {
                this[this.tableSchedule.SymbolIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableSchedule.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableSchedule.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityRow[] GetActivityRowsByFK_Activity_Schedule() {
                if ((this.Table.ChildRelations["FK_Activity_Schedule"] == null)) {
                    return new ActivityRow[0];
                }
                else {
                    return ((ActivityRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Activity_Schedule"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityRow[] GetActivityRowsByFK_Activity_Schedule1() {
                if ((this.Table.ChildRelations["FK_Activity_Schedule1"] == null)) {
                    return new ActivityRow[0];
                }
                else {
                    return ((ActivityRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Activity_Schedule1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SymbolRow : global::System.Data.DataRow {
            
            private SymbolDataTable tableSymbol;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SymbolRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSymbol = ((SymbolDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SymbolId {
                get {
                    return ((int)(this[this.tableSymbol.SymbolIdColumn]));
                }
                set {
                    this[this.tableSymbol.SymbolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableSymbol.IsActiveColumn]));
                }
                set {
                    this[this.tableSymbol.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Image {
                get {
                    try {
                        return ((byte[])(this[this.tableSymbol.ImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Image\' in table \'Symbol\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSymbol.ImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Sound {
                get {
                    try {
                        return ((byte[])(this[this.tableSymbol.SoundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sound\' in table \'Symbol\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSymbol.SoundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryId {
                get {
                    return ((int)(this[this.tableSymbol.CategoryIdColumn]));
                }
                set {
                    this[this.tableSymbol.CategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid Name {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableSymbol.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Symbol\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSymbol.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid rowguid {
                get {
                    return ((global::System.Guid)(this[this.tableSymbol.rowguidColumn]));
                }
                set {
                    this[this.tableSymbol.rowguidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageNull() {
                return this.IsNull(this.tableSymbol.ImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageNull() {
                this[this.tableSymbol.ImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoundNull() {
                return this.IsNull(this.tableSymbol.SoundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoundNull() {
                this[this.tableSymbol.SoundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableSymbol.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableSymbol.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityRow[] GetActivityRows() {
                if ((this.Table.ChildRelations["Symbol_Activity"] == null)) {
                    return new ActivityRow[0];
                }
                else {
                    return ((ActivityRow[])(base.GetChildRows(this.Table.ChildRelations["Symbol_Activity"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow[] GetScheduleRows() {
                if ((this.Table.ChildRelations["Symbol_Schedule"] == null)) {
                    return new ScheduleRow[0];
                }
                else {
                    return ((ScheduleRow[])(base.GetChildRows(this.Table.ChildRelations["Symbol_Schedule"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class UserRow : global::System.Data.DataRow {
            
            private UserDataTable tableUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableUser.UserIdColumn]));
                }
                set {
                    this[this.tableUser.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableUser.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableUser.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Company {
                get {
                    try {
                        return ((string)(this[this.tableUser.CompanyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Company\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.CompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableUser.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Telephone {
                get {
                    try {
                        return ((string)(this[this.tableUser.TelephoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Telephone\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.TelephoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableUser.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableUser.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Score {
                get {
                    try {
                        return ((int)(this[this.tableUser.ScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Score\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.ScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserLevelId {
                get {
                    try {
                        return ((int)(this[this.tableUser.UserLevelIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserLevelId\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.UserLevelIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid rowguid {
                get {
                    return ((global::System.Guid)(this[this.tableUser.rowguidColumn]));
                }
                set {
                    this[this.tableUser.rowguidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableUser.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableUser.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableUser.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableUser.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNull() {
                return this.IsNull(this.tableUser.CompanyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNull() {
                this[this.tableUser.CompanyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableUser.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableUser.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelephoneNull() {
                return this.IsNull(this.tableUser.TelephoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelephoneNull() {
                this[this.tableUser.TelephoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableUser.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableUser.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableUser.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableUser.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScoreNull() {
                return this.IsNull(this.tableUser.ScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScoreNull() {
                this[this.tableUser.ScoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserLevelIdNull() {
                return this.IsNull(this.tableUser.UserLevelIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserLevelIdNull() {
                this[this.tableUser.UserLevelIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow[] GetScheduleRows() {
                if ((this.Table.ChildRelations["User_Schedule"] == null)) {
                    return new ScheduleRow[0];
                }
                else {
                    return ((ScheduleRow[])(base.GetChildRows(this.Table.ChildRelations["User_Schedule"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ActivityRowChangeEvent : global::System.EventArgs {
            
            private ActivityRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityRowChangeEvent(ActivityRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ScheduleRowChangeEvent : global::System.EventArgs {
            
            private ScheduleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRowChangeEvent(ScheduleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class SymbolRowChangeEvent : global::System.EventArgs {
            
            private SymbolRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SymbolRowChangeEvent(SymbolRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SymbolRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class UserRowChangeEvent : global::System.EventArgs {
            
            private UserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRowChangeEvent(UserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace AdaWorkSystemPpc.ADAMobileDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class ActivityTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Activity";
            tableMapping.ColumnMappings.Add("ActivityId", "ActivityId");
            tableMapping.ColumnMappings.Add("ScheduleId", "ScheduleId");
            tableMapping.ColumnMappings.Add("Sequence", "Sequence");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Descripton", "Descripton");
            tableMapping.ColumnMappings.Add("SymbolId", "SymbolId");
            tableMapping.ColumnMappings.Add("StartTime", "StartTime");
            tableMapping.ColumnMappings.Add("EndTime", "EndTime");
            tableMapping.ColumnMappings.Add("MiniScheduleId", "MiniScheduleId");
            tableMapping.ColumnMappings.Add("Score", "Score");
            tableMapping.ColumnMappings.Add("ExecutionStart", "ExecutionStart");
            tableMapping.ColumnMappings.Add("ExecutionEnd", "ExecutionEnd");
            tableMapping.ColumnMappings.Add("rowguid", "rowguid");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Activity] WHERE (([ActivityId] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlServerCe.SqlCeParameter param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ActivityId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Activity] ([ScheduleId], [Sequence], [Name], [Descripton], [SymbolId" +
                "], [StartTime], [EndTime], [MiniScheduleId], [Score], [ExecutionStart], [Executi" +
                "onEnd]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ScheduleId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Sequence";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.IsNullable = true;
            param.SourceColumn = "Descripton";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SymbolId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "StartTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p7";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "EndTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p8";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "MiniScheduleId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p9";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Score";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p10";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "ExecutionStart";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p11";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "ExecutionEnd";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Activity] SET [ScheduleId] = @p1, [Sequence] = @p2, [Name] = @p3, [Descripton] = @p4, [SymbolId] = @p5, [StartTime] = @p6, [EndTime] = @p7, [MiniScheduleId] = @p8, [Score] = @p9, [ExecutionStart] = @p10, [ExecutionEnd] = @p11 WHERE (([ActivityId] = @p12))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ScheduleId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Sequence";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.IsNullable = true;
            param.SourceColumn = "Descripton";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SymbolId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "StartTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p7";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "EndTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p8";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "MiniScheduleId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p9";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Score";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p10";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "ExecutionStart";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p11";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "ExecutionEnd";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p12";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ActivityId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\ADAMobile.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     ActivityId, ScheduleId, Sequence, Name, Descripton, SymbolId, StartTime, EndTime, MiniScheduleId, Score, ExecutionStart, ExecutionEnd, 
                      rowguid
FROM         Activity
WHERE     (ScheduleId IN
                          (SELECT     ScheduleId
                            FROM          Schedule
                            WHERE      (IsActive = 1) AND (Type = 2 OR
                                                   Type = 3)))";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ADAMobileDataSet.ActivityDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ADAMobileDataSet.ActivityDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ADAMobileDataSet.ActivityDataTable dataTable = new ADAMobileDataSet.ActivityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(ADAMobileDataSet.ActivityDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(ADAMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Activity");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> p1, global::System.Nullable<int> p2, string p3, string p4, global::System.Nullable<int> p5, global::System.Nullable<global::System.DateTime> p6, global::System.Nullable<global::System.DateTime> p7, global::System.Nullable<int> p8, global::System.Nullable<int> p9, global::System.Nullable<global::System.DateTime> p10, global::System.Nullable<global::System.DateTime> p11) {
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(p7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(p8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(p10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((p11.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(p11.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> p1, global::System.Nullable<int> p2, string p3, string p4, global::System.Nullable<int> p5, global::System.Nullable<global::System.DateTime> p6, global::System.Nullable<global::System.DateTime> p7, global::System.Nullable<int> p8, global::System.Nullable<int> p9, global::System.Nullable<global::System.DateTime> p10, global::System.Nullable<global::System.DateTime> p11, int p12) {
            if ((p1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(p1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(p7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(p8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(p10.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((p11.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(p11.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(p12));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class ScheduleTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScheduleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Schedule";
            tableMapping.ColumnMappings.Add("ScheduleId", "ScheduleId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("SymbolId", "SymbolId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("rowguid", "rowguid");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Schedule] WHERE (([ScheduleId] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlServerCe.SqlCeParameter param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ScheduleId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Schedule] ([UserId], [Date], [Type], [IsActive], [SymbolId], [Name])" +
                " VALUES (@p1, @p2, @p3, @p4, @p5, @p6)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UserId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "Date";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Type";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IsActive";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SymbolId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Schedule] SET [UserId] = @p1, [Date] = @p2, [Type] = @p3, [IsActive] = @p" +
                "4, [SymbolId] = @p5, [Name] = @p6 WHERE (([ScheduleId] = @p7))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UserId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.DbType = global::System.Data.DbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "Date";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Type";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IsActive";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SymbolId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p7";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ScheduleId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\ADAMobile.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ScheduleId, UserId, [Date], Type, IsActive, SymbolId, Name, rowguid\r\nFROM " +
                "   Schedule\r\nWHERE (IsActive = 1) AND (Type = 2 OR\r\n            Type = 3) AND (S" +
                "cheduleId IN\r\n                (SELECT ScheduleId\r\n                FROM    Activi" +
                "ty))";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ADAMobileDataSet.ScheduleDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ADAMobileDataSet.ScheduleDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ADAMobileDataSet.ScheduleDataTable dataTable = new ADAMobileDataSet.ScheduleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(ADAMobileDataSet.ScheduleDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(ADAMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Schedule");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> p1, global::System.Nullable<global::System.DateTime> p2, global::System.Nullable<int> p3, global::System.Nullable<bool> p4, global::System.Nullable<int> p5, string p6) {
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> p1, global::System.Nullable<global::System.DateTime> p2, global::System.Nullable<int> p3, global::System.Nullable<bool> p4, global::System.Nullable<int> p5, string p6, int p7) {
            if ((p1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(p1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(p7));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class SymbolTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SymbolTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Symbol";
            tableMapping.ColumnMappings.Add("SymbolId", "SymbolId");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("Image", "Image");
            tableMapping.ColumnMappings.Add("Sound", "Sound");
            tableMapping.ColumnMappings.Add("CategoryId", "CategoryId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("rowguid", "rowguid");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Symbol] WHERE (([SymbolId] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlServerCe.SqlCeParameter param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SymbolId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Symbol] ([IsActive], [Image], [Sound], [CategoryId], [Name]) VALUES " +
                "(@p1, @p2, @p3, @p4, @p5)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IsActive";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.DbType = global::System.Data.DbType.Binary;
            param.IsNullable = true;
            param.SourceColumn = "Image";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.DbType = global::System.Data.DbType.Binary;
            param.IsNullable = true;
            param.SourceColumn = "Sound";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CategoryId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.DbType = global::System.Data.DbType.Guid;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Symbol] SET [IsActive] = @p1, [Image] = @p2, [Sound] = @p3, [CategoryId] " +
                "= @p4, [Name] = @p5 WHERE (([SymbolId] = @p6))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IsActive";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.DbType = global::System.Data.DbType.Binary;
            param.IsNullable = true;
            param.SourceColumn = "Image";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.DbType = global::System.Data.DbType.Binary;
            param.IsNullable = true;
            param.SourceColumn = "Sound";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "CategoryId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.DbType = global::System.Data.DbType.Guid;
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "SymbolId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\ADAMobile.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [SymbolId], [IsActive], [Image], [Sound], [CategoryId], [Name], [rowguid] " +
                "FROM [Symbol]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ADAMobileDataSet.SymbolDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ADAMobileDataSet.SymbolDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ADAMobileDataSet.SymbolDataTable dataTable = new ADAMobileDataSet.SymbolDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(ADAMobileDataSet.SymbolDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(ADAMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Symbol");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(bool p1, byte[] p2, byte[] p3, int p4, global::System.Nullable<global::System.Guid> p5) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((bool)(p1));
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((byte[])(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((byte[])(p3));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(p4));
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.Guid)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(bool p1, byte[] p2, byte[] p3, int p4, global::System.Nullable<global::System.Guid> p5, int p6) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((bool)(p1));
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((byte[])(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((byte[])(p3));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(p4));
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.Guid)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(p6));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class UserTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "User";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Company", "Company");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("Telephone", "Telephone");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("Score", "Score");
            tableMapping.ColumnMappings.Add("UserLevelId", "UserLevelId");
            tableMapping.ColumnMappings.Add("rowguid", "rowguid");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [User] WHERE (([UserId] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlServerCe.SqlCeParameter param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UserId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [User] ([IsActive], [Name], [Company], [Address], [Telephone], [Email" +
                "], [Notes], [Score], [UserLevelId]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @" +
                "p8, @p9)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IsActive";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.IsNullable = true;
            param.SourceColumn = "Company";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.IsNullable = true;
            param.SourceColumn = "Address";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.IsNullable = true;
            param.SourceColumn = "Telephone";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.IsNullable = true;
            param.SourceColumn = "Email";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p7";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "Notes";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p8";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Score";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p9";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UserLevelId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [User] SET [IsActive] = @p1, [Name] = @p2, [Company] = @p3, [Address] = @p" +
                "4, [Telephone] = @p5, [Email] = @p6, [Notes] = @p7, [Score] = @p8, [UserLevelId]" +
                " = @p9 WHERE (([UserId] = @p10))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p1";
            param.DbType = global::System.Data.DbType.Boolean;
            param.IsNullable = true;
            param.SourceColumn = "IsActive";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p2";
            param.IsNullable = true;
            param.SourceColumn = "Name";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p3";
            param.IsNullable = true;
            param.SourceColumn = "Company";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p4";
            param.IsNullable = true;
            param.SourceColumn = "Address";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p5";
            param.IsNullable = true;
            param.SourceColumn = "Telephone";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p6";
            param.IsNullable = true;
            param.SourceColumn = "Email";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p7";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "Notes";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p8";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "Score";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p9";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UserLevelId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@p10";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "UserId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\ADAMobile.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserId, IsActive, Name, Company, Address, Telephone, Email, Notes, Score, " +
                "UserLevelId, rowguid\r\nFROM    [User]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ADAMobileDataSet.UserDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ADAMobileDataSet.UserDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ADAMobileDataSet.UserDataTable dataTable = new ADAMobileDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(ADAMobileDataSet.UserDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(ADAMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "User");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<bool> p1, string p2, string p3, string p4, string p5, string p6, string p7, global::System.Nullable<int> p8, global::System.Nullable<int> p9) {
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((bool)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(p8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<bool> p1, string p2, string p3, string p4, string p5, string p6, string p7, global::System.Nullable<int> p8, global::System.Nullable<int> p9, int p10) {
            if ((p1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((bool)(p1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(p8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(p10));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}
namespace ADAMobileDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
